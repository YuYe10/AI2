''' begin generated by SiderAI'''
import pandas as pd
from datasets import Dataset, ClassLabel, Features
# 读取数据集
data = pd.read_parquet("data/data.parquet")

# 按照类别进行排序
data_sorted = data.sort_values('label')

# 获取每个类别的数量
category_counts = data_sorted['label'].value_counts()

# 计算每个类别应该被分配到训练集和测试集的数量
num_samples_per_category = category_counts.min() // 2

# 按照类别均分数据集
train_data = pd.DataFrame()
test_data = pd.DataFrame()

for category in data_sorted['label'].unique():
    category_data = data_sorted[data_sorted['label'] == category]
    train_samples = category_data[:num_samples_per_category]
    test_samples = category_data[num_samples_per_category:num_samples_per_category*2]

    train_data = train_data.append(train_samples)
    test_data = test_data.append(test_samples)

# 保存训练集和测试集为 parquet 文件
train_data.to_parquet("data/train.parquet", index=False)
test_data.to_parquet("data/test.parquet", index=False)

num_categories = 10
class CustomDataset(Dataset):
    BUILDER_CONFIGS = [
        {
            "name": "default",
            "version": "1.0.0",
            "splits": {
                "train": {},
                "test": {}
            }
        }
    ]

    def __init__(self, *args, **kwargs):
        super(CustomDataset, self).__init__(*args, **kwargs)

        self.features = Features({
            'text': 'string',
            'label': ClassLabel(num_classes=num_categories, names=[str(i) for i in range(num_categories)])
        })

    @classmethod
    def load(cls, path, name):
        # 实现加载数据集的逻辑
        dataset = CustomDataset(...)
        return dataset

dataset_train = CustomDataset.load('data/train.parquet', name='train')
dataset_test = CustomDataset.load('data/test.parquet', name='test')
''' end generated by SiderAI'''